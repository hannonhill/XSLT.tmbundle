{	scopeName = 'text.xml.xsl';
	fileTypes = ( 'xsl', 'xslt' );
	foldingStartMarker = '^\s*(<[^!?%/](?!.+?(/>|</.+?>))|<[!%]--(?!.+?--%?>)|<%[!]?(?!.+?%>))';
	foldingStopMarker = '^\s*(</[^>]+>|[/%]>|-->)\s*$';
	patterns = (
		{	contentName = 'meta.block.template.xsl';
			begin = '(<)((xsl)(:)(template))';
			end = '(</)((xsl)(:)(template))(>)';
			captures = {
			    0 = { name = 'meta.tag.template.xsl'; };
				1 = { name = 'punctuation.definition.tag.xml'; };
				2 = { name = 'entity.name.tag.xml'; };
				3 = { name = 'entity.name.tag.namespace.xml'; };
				4 = { name = 'punctuation.separator.namespace.xml'; };
				5 = { name = 'entity.name.tag.localname.xml'; };
				6 = { name = 'punctuation.definition.tag.xml'; };
			};
			patterns = (
			    {   name = 'meta.tag.template.xsl';
			        begin = '(?<=xsl:template)\s';
			        end = '>';
			        patterns = (
			            { include = '#tagStuff'; }
			        );
			    },
			    {   include = '$self'; }
			);
		},
		{	contentName = 'meta.block.for-each.xsl';
			begin = '(<)((xsl)(:)(for-each))';
			end = '(</)((xsl)(:)(for-each))(>)';
			captures = {
			    0 = { name = 'meta.tag.for-each.xsl'; };
				1 = { name = 'punctuation.definition.tag.xml'; };
				2 = { name = 'entity.name.tag.xml'; };
				3 = { name = 'entity.name.tag.namespace.xml'; };
				4 = { name = 'punctuation.separator.namespace.xml'; };
				5 = { name = 'entity.name.tag.localname.xml'; };
				6 = { name = 'punctuation.definition.tag.xml'; };
			};
			patterns = (
			    {   name = 'meta.tag.for-each.xsl';
			        begin = '(?<=xsl:for-each)\s';
			        end = '>';
			        patterns = (
			            { include = '#tagStuff'; }
			        );
			    },
			    {   include = '$self'; }
			);
		},
		{	contentName = 'meta.block.apply-templates.xsl';
			begin = '(<)((xsl)(:)(apply-templates))';
			end = '(</)((xsl)(:)(apply-templates))(>)';
			captures = {
			    0 = { name = 'meta.tag.apply-templates.xsl'; };
				1 = { name = 'punctuation.definition.tag.xml'; };
				2 = { name = 'entity.name.tag.xml'; };
				3 = { name = 'entity.name.tag.namespace.xml'; };
				4 = { name = 'punctuation.separator.namespace.xml'; };
				5 = { name = 'entity.name.tag.localname.xml'; };
				6 = { name = 'punctuation.definition.tag.xml'; };
			};
			patterns = (
			    {   name = 'meta.tag.apply-templates.xsl';
			        begin = '(?<=xsl:apply-templates)\s';
			        end = '>';
			        patterns = (
			            { include = '#tagStuff'; }
			        );
			    },
			    {   include = '$self'; }
			);
		},
		{	contentName = 'meta.block.choose.xsl';
			begin = '(<)((xsl)(:)(choose))(>)';
			end = '(</)((xsl)(:)(choose))(>)';
			captures = {
			    0 = { name = 'meta.tag.choose.xsl'; };
				1 = { name = 'punctuation.definition.tag.xml'; };
				2 = { name = 'entity.name.tag.xml'; };
				3 = { name = 'entity.name.tag.namespace.xml'; };
				4 = { name = 'punctuation.separator.namespace.xml'; };
				5 = { name = 'entity.name.tag.localname.xml'; };
				6 = { name = 'punctuation.definition.tag.xml'; };
			};
			patterns = (
			    { include = '$self'; }
			);
		},
		{	include = 'text.xml'; },
	);
	repository = {
		doublequotedString = {
			name = 'string.quoted.double.xml';
			begin = '"';
			end = '"';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.xml'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.xml'; }; };
		};
		singlequotedString = {
			name = 'string.quoted.single.xml';
			begin = "'";
			end = "'";
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.xml'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.xml'; }; };
		};
		tagStuff = {
			patterns = (
				{	match = '(?<=\s)(?:([-_a-zA-Z0-9]+)((:)))?([_a-zA-Z-]+)=';
					captures = {
						1 = { name = 'entity.other.attribute-name.namespace.xml'; };
						2 = { name = 'entity.other.attribute-name.xml'; };
						3 = { name = 'punctuation.separator.namespace.xml'; };
						4 = { name = 'entity.other.attribute-name.localname.xml'; };
					};
				},
				{	include = '#doublequotedString'; },
				{	include = '#singlequotedString'; },
			);
		};
	};
}