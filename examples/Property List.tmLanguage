{	scopeName = '';
	fileTypes = ( 'plist', 'dict', 'tmCommand', 'tmDelta', 'tmDragCommand', 'tmLanguage', 'tmMacro', 'tmPreferences', 'tmSnippet', 'tmTheme', 'scriptSuite', 'scriptTerminology', 'savedSearch' );
	foldingStartMarker = '(?x)
							(
								(^|=|=[ ]|\s\s|\t)				# Openstep foldings
								(\{|\()(?!.*(\)|\}))			# spaces before them to 
																# limit false positives
							  | (
									^\s*
									(
										<[^!?%/](?!.+?(/>
									  | </.+?>))
									  | <[!%]--(?!.+?--%?>)
									)
								)
							)
						 ';
	foldingStopMarker = '(?x)
							(
								(\}|\))(,|;)?					# Openstep foldings
								.*$								# limit false positives
							  | (^\s*(</[^>]+>|/>|-->)\s*$)		# XML						
							)
						';
	patterns = (
		{	name = 'text.xml.plist';
			comment = 'This gives us the proper scope for the xml or plist snippet.';
			begin = 'xml|plist';
			end = '\Z(?!\n)';
		},
		{	name = 'source.plist.binary';
			comment = 'This gives us the proper scope for the convert plist command.';
			begin = '^bplist00';
			end = '\Z(?!\n)';
		},
		{	name = 'text.xml.plist';
			begin = '(?=\s*(<\?xml|<!DOCTYPE\s*plist))';
			end = '\Z(?!\n)';
			patterns = ( { include = '#xml'; } );
		},
		{	name = 'source.plist';
			begin = '(?=\s*({|\(|//|/\*))';
			end = '\Z(?!\n)';
			patterns = ( { include = '#openstep'; } );
		},
	);
	repository = {
		openstep = {
			patterns = (
				{	include = '#openstep_comment'; },
				{	include = '#openstep_dictionary'; },
				{	include = '#openstep_array'; },
				{	include = '#openstep_stray-char'; },
			);
		};
		openstep_array = {
			name = 'meta.group.array.plist';
			begin = '(\()';
			end = '(\))';
			captures = { 1 = { name = 'punctuation.section.array.plist'; }; };
			patterns = (
				{	include = '#openstep_array-item'; },
				{	include = '#openstep_comment'; },
				{	include = '#openstep_stray-char'; },
			);
		};
		openstep_array-item = {
			begin = '(?={|\(|"|''|[-a-zA-Z0-9_.]|<)';
			end = '(,)|(?=\))';
			endCaptures = { 1 = { name = 'punctuation.separator.array.plist'; }; };
			patterns = (
				{	include = '#openstep_string'; },
				{	include = '#openstep_data'; },
				{	include = '#openstep_dictionary'; },
				{	include = '#openstep_array'; },
				{	comment = 'Catch stray chars';
					begin = '(?<="|''|\}|\))';
					end = '(?=,|\))';
					patterns = (
						{	include = '#openstep_comment'; },
						{	include = '#openstep_stray-char'; },
					);
				},
			);
		};
		openstep_comment = {
			patterns = (
				{	name = 'comment.block.plist';
					begin = '/\*';
					end = '\*/';
					captures = { 0 = { name = 'punctuation.definition.comment.plist'; }; };
				},
				{	name = 'comment.line.double-slash.plist';
					match = '(//).*$\n?';
					captures = { 1 = { name = 'punctuation.definition.comment.plist'; }; };
				},
			);
		};
		openstep_data = {
			name = 'meta.binary-data.plist';
			begin = '(<)';
			end = '(=?)\s*?(>)';
			beginCaptures = { 1 = { name = 'punctuation.definition.data.plist'; }; };
			endCaptures = {
				1 = { name = 'punctuation.terminator.data.plist'; };
				2 = { name = 'punctuation.definition.data.plist'; };
			};
			patterns = (
				{	name = 'constant.numeric.base64.plist';
					match = '[A-Za-z0-9+/]';
				},
				{	name = 'invalid.illegal.invalid-character.plist';
					match = '[^ \n]';
				},
			);
		};
		openstep_dictionary = {
			name = 'meta.group.dictionary.plist';
			begin = '(\{)';
			end = '(\})';
			captures = { 1 = { name = 'punctuation.section.dictionary.plist'; }; };
			patterns = (
				{	include = '#openstep_name'; },
				{	include = '#openstep_comment'; },
				{	include = '#openstep_stray-char'; },
			);
		};
		openstep_name = {
			patterns = (
				{	name = 'meta.rule.named.plist';
					begin = '(?=([-a-zA-Z0-9_.]+)|("|''))';
					end = '((?<=\));)|((?<=\});)|(;)';
					endCaptures = {
						1 = { name = 'punctuation.terminator.array.plist'; };
						2 = { name = 'punctuation.terminator.dictionary.plist'; };
						3 = { name = 'punctuation.terminator.rule.plist'; };
					};
					patterns = (
						{	name = 'constant.other.key.plist';
							match = '[-a-zA-Z0-9_.]+';
						},
						{	comment = 'Mark anything between the name and the =
										as invalid.';
							begin = '(?<=(''|"|[-a-zA-Z0-9_.]))(?!=)|\s';
							end = '(?==)';
							patterns = ( { include = '#openstep_stray-char'; } );
						},
						{	name = 'constant.other.key.plist';
							begin = '("|'')';
							end = '(\1)';
							beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.plist'; }; };
							endCaptures = { 0 = { name = 'punctuation.definition.string.end.plist'; }; };
							patterns = ( { include = '#openstep_string-contents'; } );
						},
						{	begin = '(=)(?!;)';
							end = '(?=;)';
							beginCaptures = { 1 = { name = 'punctuation.separator.key-value.plist'; }; };
							patterns = (
								{	include = '#openstep_post-value'; },
								{	include = '#openstep_string'; },
								{	include = '#openstep_data'; },
								{	include = '#openstep_array'; },
								{	include = '#openstep_dictionary'; },
							);
						},
					);
				},
			);
		};
		openstep_post-value = {
			begin = '(?<=''|"|\}|\)|>|[-a-zA-Z0-9_.])(?!;)';
			end = '(?=;)';
			patterns = ( { include = '#openstep_stray-char'; } );
		};
		openstep_stray-char = {
			name = 'invalid.illegal.character-not-allowed-here.plist';
			match = '[^\s\n]';
		};
		openstep_string = {
			patterns = (
				{	name = 'string.quoted.single.plist';
					begin = "'";
					end = "'";
					beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.plist'; }; };
					endCaptures = { 0 = { name = 'punctuation.definition.string.end.plist'; }; };
					patterns = ( { include = '#openstep_string-contents'; } );
				},
				{	name = 'string.quoted.double.plist';
					begin = '"';
					end = '"';
					beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.plist'; }; };
					endCaptures = { 0 = { name = 'punctuation.definition.string.end.plist'; }; };
					patterns = ( { include = '#openstep_string-contents'; } );
				},
				{	name = 'constant.numeric.plist';
					match = '[-+]?\d+(\.\d*)?(E[-+]\d+)?(?!\w)';
				},
				{	name = 'string.unquoted.plist';
					match = '[-a-zA-Z0-9_.]+';
				},
			);
		};
		openstep_string-contents = {
			name = 'constant.character.escape.plist';
			match = '\\([uU](\h{4}|\h{2})|\d{1,3}|.)';
		};
		xml = {
			patterns = (
				{	begin = '((<)((plist\b)))';
					end = '((/)((plist))(>))';
					captures = {
						1 = { name = 'meta.tag.plist.xml.plist'; };
						2 = { name = 'punctuation.definition.tag.xml.plist'; };
						3 = { name = 'entity.name.tag.xml.plist'; };
						4 = { name = 'entity.name.tag.localname.xml.plist'; };
						5 = { name = 'punctuation.definition.tag.xml.plist'; };
					};
					patterns = (
						{	name = 'meta.tag.plist.xml.plist';
							begin = '(?<=<plist)(?!>)\s*(?:(version)(=)(?:((").*?("))|(('').*?(''))))?';
							end = '(?=>)';
							beginCaptures = {
								1 = { name = 'entity.other.attribute-name.version.xml.plist'; };
								2 = { name = 'punctuation.separator.key-value.xml.plist'; };
								3 = { name = 'string.quoted.double.xml.plist'; };
								4 = { name = 'punctuation.definition.string.begin.xml.plist'; };
								5 = { name = 'punctuation.definition.string.end.xml.plist'; };
								6 = { name = 'string.quoted.single.xml.plist'; };
								7 = { name = 'punctuation.definition.string.begin.xml.plist'; };
								8 = { name = 'punctuation.definition.string.end.xml.plist'; };
							};
						},
						{	comment = 'Tag with no content';
							match = '((>(<)))(?=/plist)';
							captures = {
								1 = { name = 'meta.tag.plist.xml.plist'; };
								2 = { name = 'punctuation.definition.tag.xml.plist'; };
								3 = { name = 'meta.scope.between-tag-pair.xml.plist'; };
							};
						},
						{	begin = '((>))(?!</plist)';
							end = '(<)(?=/plist)';
							beginCaptures = {
								1 = { name = 'meta.tag.plist.xml.plist'; };
								2 = { name = 'punctuation.definition.tag.xml.plist'; };
							};
							endCaptures = {
								0 = { name = 'meta.tag.plist.xml.plist'; };
								1 = { name = 'punctuation.definition.tag.xml.plist'; };
							};
							patterns = ( { include = '#xml_tags'; } );
						},
					);
				},
				{	include = '#xml_invalid'; },
				{	include = '#xml_comment'; },
				{	include = 'text.xml'; },
				{	include = '#xml_stray-char'; },
			);
		};
		xml_comment = {
			name = 'comment.block.xml.plist';
			begin = '<!--';
			end = '(?<!-)-->';
			captures = { 0 = { name = 'punctuation.definition.comment.xml.plist'; }; };
			patterns = (
				{	name = 'invalid.illegal.double-dash-not-allowed.xml.plist';
					match = '-(?=-->)|--';
				},
			);
		};
		xml_innertag = {
			patterns = (
				{	name = 'constant.character.entity.xml.plist';
					match = '&([a-zA-Z0-9_-]+|#[0-9]+|#x[0-9a-fA-F]+);';
				},
				{	name = 'invalid.illegal.bad-ampersand.xml.plist';
					match = '&';
				},
			);
		};
		xml_invalid = {
			comment = 'Invalid tag';
			match = '((<)/?(\w+).*?(>))';
			captures = {
				1 = { name = 'meta.tag.boolean.xml.plist'; };
				2 = { name = 'punctuation.definition.tag.xml.plist'; };
				3 = { name = 'invalid.illegal.tag-not-recognized.xml.plist'; };
				4 = { name = 'punctuation.definition.tag.xml.plist'; };
			};
		};
		xml_stray-char = {
			name = 'invalid.illegal.character-data-not-allowed-here.xml.plist';
			match = '\S';
		};
		xml_tags = {
			patterns = (
				{	comment = 'Empty tag: Dictionary';
					match = '((<)((dict))(>))(((<)/)((dict))(>))';
					captures = {
						1 = { name = 'meta.tag.dict.xml.plist'; };
						2 = { name = 'punctuation.definition.tag.xml.plist'; };
						3 = { name = 'entity.name.tag.xml.plist'; };
						4 = { name = 'entity.name.tag.localname.xml.plist'; };
						5 = { name = 'punctuation.definition.tag.xml.plist'; };
						6 = { name = 'meta.tag.dict.xml.plist'; };
						7 = { name = 'punctuation.definition.tag.xml.plist'; };
						8 = { name = 'meta.scope.between-tag-pair.xml.plist'; };
						9 = { name = 'entity.name.tag.xml.plist'; };
						10 = { name = 'entity.name.tag.localname.xml.plist'; };
						11 = { name = 'punctuation.definition.tag.xml.plist'; };
					};
				},
				{	comment = 'Empty tag: Array';
					match = '((<)((array))(>))(((<)/)((array))(>))';
					captures = {
						1 = { name = 'meta.tag.array.xml.plist'; };
						2 = { name = 'punctuation.definition.tag.xml.plist'; };
						3 = { name = 'entity.name.tag.xml.plist'; };
						4 = { name = 'entity.name.tag.localname.xml.plist'; };
						5 = { name = 'punctuation.definition.tag.xml.plist'; };
						6 = { name = 'meta.tag.array.xml.plist'; };
						7 = { name = 'punctuation.definition.tag.xml.plist'; };
						8 = { name = 'meta.scope.between-tag-pair.xml.plist'; };
						9 = { name = 'entity.name.tag.xml.plist'; };
						10 = { name = 'entity.name.tag.localname.xml.plist'; };
						11 = { name = 'punctuation.definition.tag.xml.plist'; };
					};
				},
				{	comment = 'Empty tag: String';
					match = '((<)((string))(>))(((<)/)((string))(>))';
					captures = {
						1 = { name = 'meta.tag.string.xml.plist'; };
						2 = { name = 'punctuation.definition.tag.xml.plist'; };
						3 = { name = 'entity.name.tag.xml.plist'; };
						4 = { name = 'entity.name.tag.localname.xml.plist'; };
						5 = { name = 'punctuation.definition.tag.xml.plist'; };
						6 = { name = 'meta.tag.string.xml.plist'; };
						7 = { name = 'punctuation.definition.tag.xml.plist'; };
						8 = { name = 'meta.scope.between-tag-pair.xml.plist'; };
						9 = { name = 'entity.name.tag.xml.plist'; };
						10 = { name = 'entity.name.tag.localname.xml.plist'; };
						11 = { name = 'punctuation.definition.tag.xml.plist'; };
					};
				},
				{	contentName = 'constant.other.name.xml.plist';
					comment = 'the extra captures are required to duplicate the effect of the namespace parsing in the XML syntax';
					begin = '((<)((key))(>))';
					end = '((</)((key))(>))';
					captures = {
						1 = { name = 'meta.tag.key.xml.plist'; };
						2 = { name = 'punctuation.definition.tag.xml.plist'; };
						3 = { name = 'entity.name.tag.xml.plist'; };
						4 = { name = 'entity.name.tag.localname.xml.plist'; };
						5 = { name = 'punctuation.definition.tag.xml.plist'; };
					};
					patterns = (
						{	begin = '<!\[CDATA\[';
							end = ']]>';
							captures = { 0 = { name = 'punctuation.definition.constant.xml'; }; };
						},
					);
				},
				{	comment = 'Self-closing Dictionary';
					match = '((<)((dict))\s*?/(>))';
					captures = {
						1 = { name = 'meta.tag.dict.xml.plist'; };
						2 = { name = 'punctuation.definition.tag.xml.plist'; };
						3 = { name = 'entity.name.tag.xml.plist'; };
						4 = { name = 'entity.name.tag.localname.xml.plist'; };
						5 = { name = 'punctuation.definition.tag.xml.plist'; };
					};
				},
				{	comment = 'Self-closing Array';
					match = '((<)((array))\s*?/(>))';
					captures = {
						1 = { name = 'meta.tag.array.xml.plist'; };
						2 = { name = 'punctuation.definition.tag.xml.plist'; };
						3 = { name = 'entity.name.tag.xml.plist'; };
						4 = { name = 'entity.name.tag.localname.xml.plist'; };
						5 = { name = 'punctuation.definition.tag.xml.plist'; };
					};
				},
				{	comment = 'Self-closing String';
					match = '((<)((string))\s*?/(>))';
					captures = {
						1 = { name = 'meta.tag.string.xml.plist'; };
						2 = { name = 'punctuation.definition.tag.xml.plist'; };
						3 = { name = 'entity.name.tag.xml.plist'; };
						4 = { name = 'entity.name.tag.localname.xml.plist'; };
						5 = { name = 'punctuation.definition.tag.xml.plist'; };
					};
				},
				{	comment = 'Self-closing Key';
					match = '((<)((key))\s*?/(>))';
					captures = {
						1 = { name = 'meta.tag.key.xml.plist'; };
						2 = { name = 'punctuation.definition.tag.xml.plist'; };
						3 = { name = 'entity.name.tag.xml.plist'; };
						4 = { name = 'entity.name.tag.localname.xml.plist'; };
						5 = { name = 'punctuation.definition.tag.xml.plist'; };
					};
				},
				{	comment = 'Dictionary';
					begin = '((<)((dict))(>))';
					end = '((</)((dict))(>))';
					captures = {
						1 = { name = 'meta.tag.dict.xml.plist'; };
						2 = { name = 'punctuation.definition.tag.xml.plist'; };
						3 = { name = 'entity.name.tag.xml.plist'; };
						4 = { name = 'entity.name.tag.localname.xml.plist'; };
						5 = { name = 'punctuation.definition.tag.xml.plist'; };
					};
					patterns = ( { include = '#xml_tags'; } );
				},
				{	comment = 'Array';
					begin = '((<)((array))(>))';
					end = '((</)((array))(>))';
					captures = {
						1 = { name = 'meta.tag.array.xml.plist'; };
						2 = { name = 'punctuation.definition.tag.xml.plist'; };
						3 = { name = 'entity.name.tag.xml.plist'; };
						4 = { name = 'entity.name.tag.localname.xml.plist'; };
						5 = { name = 'punctuation.definition.tag.xml.plist'; };
					};
					patterns = ( { include = '#xml_tags'; } );
				},
				{	contentName = 'string.quoted.other.xml.plist';
					comment = 'Strings';
					begin = '((<)((string))(>))';
					end = '((</)((string))(>))';
					captures = {
						1 = { name = 'meta.tag.string.xml.plist'; };
						2 = { name = 'punctuation.definition.tag.xml.plist'; };
						3 = { name = 'entity.name.tag.xml.plist'; };
						4 = { name = 'entity.name.tag.localname.xml.plist'; };
						5 = { name = 'punctuation.definition.tag.xml.plist'; };
					};
					patterns = (
						{	include = '#xml_innertag'; },
						{	name = 'string.unquoted.cdata.xml';
							begin = '<!\[CDATA\[';
							end = ']]>';
							captures = { 0 = { name = 'punctuation.definition.string.xml'; }; };
						},
					);
				},
				{	comment = 'Numeric';
					begin = '((<)((real))(>))';
					end = '((</)((real))(>))';
					captures = {
						1 = { name = 'meta.tag.real.xml.plist'; };
						2 = { name = 'punctuation.definition.tag.xml.plist'; };
						3 = { name = 'entity.name.tag.xml.plist'; };
						4 = { name = 'entity.name.tag.localname.xml.plist'; };
						5 = { name = 'punctuation.definition.tag.xml.plist'; };
					};
					patterns = (
						{	begin = '(<!\[CDATA\[)';
							end = '(]]>)';
							captures = {
								0 = { name = 'punctuation.definition.constant.xml'; };
								1 = { name = 'constant.numeric.real.xml.plist'; };
							};
							patterns = (
								{	name = 'constant.numeric.real.xml.plist';
									match = '[-+]?\d+(\.\d*)?(E[-+]\d+)?';
								},
								{	name = 'invalid.illegal.not-a-number.xml.plist';
									match = '.';
								},
							);
						},
						{	name = 'constant.numeric.real.xml.plist';
							match = '[-+]?\d+(\.\d*)?(E[-+]\d+)?';
						},
						{	name = 'invalid.illegal.not-a-number.xml.plist';
							match = '.';
						},
					);
				},
				{	comment = 'Integer';
					begin = '((<)((integer))(>))';
					end = '((</)((integer))(>))';
					captures = {
						1 = { name = 'meta.tag.integer.xml.plist'; };
						2 = { name = 'punctuation.definition.tag.xml.plist'; };
						3 = { name = 'entity.name.tag.xml.plist'; };
						4 = { name = 'entity.name.tag.localname.xml.plist'; };
						5 = { name = 'punctuation.definition.tag.xml.plist'; };
					};
					patterns = (
						{	name = 'constant.numeric.integer.xml.plist';
							match = '[-+]?\d+';
						},
						{	name = 'invalid.illegal.not-a-number.xml.plist';
							match = '.';
						},
					);
				},
				{	comment = 'Boolean';
					match = '((<)((true|false))\s*?(/>))';
					captures = {
						1 = { name = 'meta.tag.boolean.xml.plist'; };
						2 = { name = 'punctuation.definition.tag.xml.plist'; };
						3 = { name = 'entity.name.tag.xml.plist'; };
						4 = { name = 'entity.name.tag.localname.xml.plist'; };
						5 = { name = 'punctuation.definition.tag.xml.plist'; };
					};
				},
				{	comment = 'Data';
					begin = '((<)((data))(>))';
					end = '((</)((data))(>))';
					captures = {
						1 = { name = 'meta.tag.data.xml.plist'; };
						2 = { name = 'punctuation.definition.tag.xml.plist'; };
						3 = { name = 'entity.name.tag.xml.plist'; };
						4 = { name = 'entity.name.tag.localname.xml.plist'; };
						5 = { name = 'punctuation.definition.tag.xml.plist'; };
					};
					patterns = (
						{	name = 'constant.numeric.base64.xml.plist';
							match = '[A-Za-z0-9+/]';
						},
						{	name = 'constant.numeric.base64.xml.plist';
							match = '=';
						},
						{	name = 'invalid.illegal.invalid-character.xml.plist';
							match = '[^ \n\t]';
						},
					);
				},
				{	comment = 'Date';
					begin = '((<)((date))(>))';
					end = '((</)((date))(>))';
					captures = {
						1 = { name = 'meta.tag.date.xml.plist'; };
						2 = { name = 'punctuation.definition.tag.xml.plist'; };
						3 = { name = 'entity.name.tag.xml.plist'; };
						4 = { name = 'entity.name.tag.localname.xml.plist'; };
						5 = { name = 'punctuation.definition.tag.xml.plist'; };
					};
					patterns = (
						{	name = 'constant.other.date.xml.plist';
							match = '(?x)
										[0-9]{4}						# Year
										-								# Divider
										(0[1-9]|1[012])					# Month
										-								# Divider
										(?!00|3[2-9])[0-3][0-9]			# Day
										T								# Separator
										(?!2[5-9])[0-2][0-9]			# Hour
										:								# Divider
										[0-5][0-9]						# Minute
										:								# Divider
										(?!6[1-9])[0-6][0-9]			# Second
										Z								# Zulu
									';
						},
					);
				},
				{	include = '#xml_invalid'; },
				{	include = '#xml_comment'; },
				{	include = '#xml_stray-char'; },
			);
		};
	};
}